AWSTemplateFormatVersion: '2010-09-09'
Description: A CloudFormation template for services required by Photos App, built for the Fall 2023 Cloud Computing course at NYU Tandon.

Resources:    
  FrontendS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub "photosappsite"
      WebsiteConfiguration:
        IndexDocument: index.html
        # ErrorDocument: error.html
      PublicAccessBlockConfiguration: 
        BlockPublicAcls: False
        BlockPublicPolicy: False
        IgnorePublicAcls: False
        RestrictPublicBuckets: False
  
  FrontendS3Policy:
    Type: 'AWS::S3::BucketPolicy'
    DeletionPolicy: Delete
    Properties:
      Bucket: !Ref FrontendS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: 'Allow'
          Principal: '*'
          Action: 's3:GetObject'
          Resource: !Sub 'arn:aws:s3:::${FrontendS3Bucket}/*'
  
  PhotoStoreS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "photosbucketb2cc"
      PublicAccessBlockConfiguration: 
        BlockPublicAcls: False
        BlockPublicPolicy: False
        IgnorePublicAcls: False
        RestrictPublicBuckets: False
  
  PhotoStorePolicy:
    Type: 'AWS::S3::BucketPolicy'
    DeletionPolicy: Delete
    Properties:
      Bucket: !Ref PhotoStoreS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: 'Allow'
          Principal: '*'
          Action: 
            - 's3:GetObject'
            - 's3:PutObject'
          Resource: !Sub 'arn:aws:s3:::${PhotoStoreS3Bucket}/*'

  PhotosElasticSearchDomain:
    Type: "AWS::OpenSearchService::Domain"
    Properties:
      DomainName: !Sub "photos"
      AdvancedSecurityOptions:
        Enabled: true
        InternalUserDatabaseEnabled: true
        MasterUserOptions:
          MasterUserName: 'root'
          MasterUserPassword: 'Root@123'
        AnonymousAuthEnabled: False
      ClusterConfig:
        InstanceType: 't3.small.search'
        InstanceCount: 1
        DedicatedMasterEnabled: False
        ZoneAwarenessEnabled: False
        WarmEnabled: False
      CognitoOptions:
        Enabled: False
      DomainEndpointOptions:
        EnforceHTTPS: True
        TLSSecurityPolicy: Policy-Min-TLS-1-0-2019-07
        CustomEndpointEnabled: False
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 100 # Specify your desired volume size in GB
        VolumeType: "gp3"
      SnapshotOptions:
        AutomatedSnapshotStartHour: 0
      EncryptionAtRestOptions:
        Enabled: true
      NodeToNodeEncryptionOptions:
        Enabled: true

  LambdaFunction1:
    Type: AWS::Lambda::Function
    DeletionPolicy: Delete
    Properties:
      FunctionName: "LambdaFunction1"
      Code:
        S3Bucket: photolambdafunctions
        S3Key: lambda_function_1.zip 
      Handler: lambda_function.lambda_handler 
      Role: !GetAtt LambdaFunction1ExecutionRole.Arn
      Runtime: python3.11  
      Timeout: 30
  
  LambdaFunction1ExecutionRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaFunction1Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rekognition:*
                  - es:ESHttp*
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt PhotoStoreS3Bucket.Arn
                  - !Sub '${PhotoStoreS3Bucket.Arn}/*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams                  
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:FilterLogEvents  
                Resource: arn:aws:logs:*:*:*  
  
  LambdaFunction1InvokePermission:
    Type: AWS::Lambda::Permission
    DeletionPolicy: Delete
    Properties:
      FunctionName: !Ref LambdaFunction1
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PhotosRestApi}/*/*/*"

  
  LambdaFunction2:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "LambdaFunction2"
      Code:
        S3Bucket: photolambdafunctions
        S3Key: lambda_function_2.zip
      Handler: lambda_function.handler 
      Role: !GetAtt LambdaFunction2ExecutionRole.Arn
      Runtime: python3.11
      Timeout: 30
  
  LambdaFunction2ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
      - PolicyName: LambdaFunction2Policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - lex:*
              Resource: '*'
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:DescribeLogGroups
                - logs:DescribeLogStreams                  
                - logs:PutLogEvents
                - logs:GetLogEvents
                - logs:FilterLogEvents  
              Resource: arn:aws:logs:*:*:*

  PhotosRestApi:
    Type: AWS::ApiGateway::RestApi
    DeletionPolicy: Delete
    Properties:
      Name: !Sub "Photos-App-API"
      EndpointConfiguration:
        Types:
          - REGIONAL
      BinaryMediaTypes: ["image/jpg", "image/jpeg", "image/png"]
      Description: "REST API for Photos App, built for the Fall 2023 Cloud Computing course at NYU Tandon."
  
  PhotosRestApiUploadResource:
    Type: AWS::ApiGateway::Resource
    # DependsOn: PhotosRestApi
    DeletionPolicy: Delete
    Properties:
      RestApiId: !Ref PhotosRestApi
      ParentId: !GetAtt
        - PhotosRestApi
        - RootResourceId

      PathPart: "upload-v2"
  PhotosRestApiUploadObjectResource:
    Type: AWS::ApiGateway::Resource
    # DependsOn: PhotosRestApiUploadResource
    Properties:
      RestApiId: !Ref PhotosRestApi
      ParentId: !Ref PhotosRestApiUploadResource
      PathPart: '{object}'  # The variable part of the path

  PhotosRestApiSearchResource:
    Type: AWS::ApiGateway::Resource
    DependsOn: PhotosRestApi
    DeletionPolicy: Delete
    Properties:
      RestApiId: !Ref PhotosRestApi
      ParentId: !GetAtt
        - PhotosRestApi
        - RootResourceId
      PathPart: "search-v2"

  PhotosRestApiPutMethod:
    Type: AWS::ApiGateway::Method
    # DependsOn: PhotosRestApiUploadResource
    DeletionPolicy: Delete
    Properties:
      ApiKeyRequired: False
      AuthorizationType: NONE
      HttpMethod: PUT
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: PUT
        IntegrationResponses:
          - StatusCode: 200
        RequestParameters:
          integration.request.path.object: 'method.request.path.object'
          integration.request.header.x-amz-meta-customLabels: 'method.request.header.x-amz-meta-customLabels'
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:s3:path/${PhotoStoreS3Bucket}/${!method.request.path.object}"
        MethodResponses:
        - StatusCode: 200
        - StatusCode: 403
        - StatusCode: 500
      OperationName: "/upload"
      RequestParameters:
        method.request.header.bucket: True
        method.request.header.key: True
        method.request.header.x-amz-meta-customLabels: True
      ResourceId: !Ref PhotosRestApiUploadResource
      RestApiId: !Ref PhotosRestApi
  # OPTIONS method on /upload
  UploadOPTIONSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PhotosRestApi # Replace with your API Gateway resource name
      ResourceId: !Ref PhotosRestApiUploadResource # Replace with the resource ID for the upload path
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Methods: "'PUT,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true


  PhotosRestApiGetMethod:
    Type: AWS::ApiGateway::Method
    DependsOn: PhotosRestApiSearchResource
    DeletionPolicy: Delete
    Properties:
      ApiKeyRequired: False
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
        RequestTemplates:
          "application/json": "{\"q\": \"$input.params('q')\"}"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt LambdaFunction2.Arn
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 403
        - StatusCode: 500
      OperationName: "/search"
      RequestParameters:
        method.request.querystring.q: True
      ResourceId: !Ref PhotosRestApiSearchResource
      RestApiId: !Ref PhotosRestApi
  
  PhotosRestApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DeletionPolicy: Delete
    DependsOn:
      - PhotosRestApiPutMethod
      - PhotosRestApiGetMethod
    Properties:
      RestApiId: !Ref PhotosRestApi
      StageName: prod
  
  