AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: An AWS Serverless Application Model template describing CSGY-9223 Assignment 3 Lambda functions.

Resources:
  indexphotos:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://photolambdafunctions/lambda_function_1_v2.zip
      MemorySize: 128
      Timeout: 3
      Handler: lambda_function.lambda_handler
      Runtime: python3.11
      Architectures:
        - x86_64
      EphemeralStorage:
        Size: 512

      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - apigateway:*
              Resource: arn:aws:apigateway:*::/*
            - Effect: Allow
              Action:
                - logs:*
              Resource: arn:aws:logs:*:*:*
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource: arn:aws:s3:::*
            - Effect: Allow
              Action:
                - rekognition:*
              Resource: '*'
            - Effect: Allow
              Action:
                - cloudwatch:GetMetricStatistics
                - cloudwatch:DescribeAlarms
                - cloudwatch:DescribeAlarmsForMetric
                - lambda:GetPolicy
                - lambda:ListFunctions
                - iam:ListRoles
                - s3:ListAllMyBuckets
                - logs:DescribeLogGroups
                - s3:GetBucketLocation
              Resource:
                - '*'
            - Effect: Allow
              Action:
                - lambda:AddPermission
                - lambda:RemovePermission
              Resource: arn:aws:lambda:*:*:function:AmazonLex*
              Condition:
                StringEquals:
                  lambda:Principal: lex.amazonaws.com
            - Effect: Allow
              Action:
                - iam:GetRole
              Resource:
                - >-
                  arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots
                - >-
                  arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels
                - >-
                  arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*
                - >-
                  arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*
            - Effect: Allow
              Action:
                - iam:CreateServiceLinkedRole
              Resource:
                - >-
                  arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots
              Condition:
                StringEquals:
                  iam:AWSServiceName: lex.amazonaws.com
            - Effect: Allow
              Action:
                - iam:CreateServiceLinkedRole
              Resource:
                - >-
                  arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels
              Condition:
                StringEquals:
                  iam:AWSServiceName: channels.lex.amazonaws.com
            - Effect: Allow
              Action:
                - iam:CreateServiceLinkedRole
              Resource:
                - >-
                  arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*
              Condition:
                StringEquals:
                  iam:AWSServiceName: lexv2.amazonaws.com
            - Effect: Allow
              Action:
                - iam:CreateServiceLinkedRole
              Resource:
                - >-
                  arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*
              Condition:
                StringEquals:
                  iam:AWSServiceName: channels.lexv2.amazonaws.com
            - Effect: Allow
              Action:
                - iam:DeleteServiceLinkedRole
                - iam:GetServiceLinkedRoleDeletionStatus
              Resource:
                - >-
                  arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots
                - >-
                  arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels
                - >-
                  arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*
                - >-
                  arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource:
                - >-
                  arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots
              Condition:
                StringEquals:
                  iam:PassedToService:
                    - lex.amazonaws.com
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource:
                - >-
                  arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*
              Condition:
                StringEquals:
                  iam:PassedToService:
                    - lexv2.amazonaws.com
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource:
                - >-
                  arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*
              Condition:
                StringEquals:
                  iam:PassedToService:
                    - channels.lexv2.amazonaws.com
            - Effect: Allow
              Action:
                - execute-api:Invoke
                - execute-api:ManageConnections
              Resource: arn:aws:execute-api:*:*:*
            - Action:
                - application-autoscaling:DeleteScalingPolicy
                - application-autoscaling:DeregisterScalableTarget
                - application-autoscaling:DescribeScalableTargets
                - application-autoscaling:DescribeScalingActivities
                - application-autoscaling:DescribeScalingPolicies
                - application-autoscaling:PutScalingPolicy
                - application-autoscaling:RegisterScalableTarget
                - cloudwatch:DeleteAlarms
                - cloudwatch:DescribeAlarmHistory
                - cloudwatch:DescribeAlarms
                - cloudwatch:DescribeAlarmsForMetric
                - cloudwatch:GetMetricStatistics
                - cloudwatch:ListMetrics
                - cloudwatch:PutMetricAlarm
                - cloudwatch:GetMetricData
                - datapipeline:ActivatePipeline
                - datapipeline:CreatePipeline
                - datapipeline:DeletePipeline
                - datapipeline:DescribeObjects
                - datapipeline:DescribePipelines
                - datapipeline:GetPipelineDefinition
                - datapipeline:ListPipelines
                - datapipeline:PutPipelineDefinition
                - datapipeline:QueryObjects
                - lambda:CreateFunction
                - lambda:ListFunctions
                - lambda:ListEventSourceMappings
                - lambda:CreateEventSourceMapping
                - lambda:DeleteEventSourceMapping
                - lambda:GetFunctionConfiguration
                - lambda:DeleteFunction
                - resource-groups:ListGroups
                - resource-groups:ListGroupResources
                - resource-groups:GetGroup
                - resource-groups:GetGroupQuery
                - resource-groups:DeleteGroup
                - resource-groups:CreateGroup
                - tag:GetResources
                - kinesis:ListStreams
                - kinesis:DescribeStream
                - kinesis:DescribeStreamSummary
              Effect: Allow
              Resource: '*'
            - Action:
                - cloudwatch:GetInsightRuleReport
              Effect: Allow
              Resource: arn:aws:cloudwatch:*:*:insight-rule/DynamoDBContributorInsights*
            - Action:
                - iam:PassRole
              Effect: Allow
              Resource: '*'
              Condition:
                StringLike:
                  iam:PassedToService:
                    - application-autoscaling.amazonaws.com
                    - application-autoscaling.amazonaws.com.cn
                    - dax.amazonaws.com
            - Effect: Allow
              Action:
                - iam:CreateServiceLinkedRole
              Resource: '*'
              Condition:
                StringEquals:
                  iam:AWSServiceName:
                    - replication.dynamodb.amazonaws.com
                    - dax.amazonaws.com
                    - dynamodb.application-autoscaling.amazonaws.com
                    - contributorinsights.dynamodb.amazonaws.com
                    - kinesisreplication.dynamodb.amazonaws.com
            - Effect: Allow
              Action:
                - osis:CreatePipeline
                - osis:UpdatePipeline
                - osis:DeletePipeline
                - osis:StartPipeline
                - osis:StopPipeline
                - osis:ListPipelines
                - osis:GetPipeline
                - osis:GetPipelineChangeProgress
                - osis:ValidatePipeline
                - osis:GetPipelineBlueprint
                - osis:ListPipelineBlueprints
                - osis:TagResource
                - osis:UntagResource
                - osis:ListTagsForResource
              Resource: '*'
            - Effect: Allow
              Action:
                - iam:CreateServiceLinkedRole
              Resource: >-
                arn:aws:iam::*:role/aws-service-role/osis.amazonaws.com/AWSServiceRoleForAmazonOpenSearchIngestionService
              Condition:
                StringLike:
                  iam:AWSServiceName: osis.amazonaws.com
            - Effect: Allow
              Action:
                - cloudformation:DescribeStacks
                - cloudformation:ListStackResources
                - cloudwatch:ListMetrics
                - cloudwatch:GetMetricData
                - ec2:DescribeSecurityGroups
                - ec2:DescribeSubnets
                - ec2:DescribeVpcs
                - kms:ListAliases
                - iam:GetPolicy
                - iam:GetPolicyVersion
                - iam:GetRole
                - iam:GetRolePolicy
                - iam:ListAttachedRolePolicies
                - iam:ListRolePolicies
                - iam:ListRoles
                - lambda:*
                - logs:DescribeLogGroups
                - states:DescribeStateMachine
                - states:ListStateMachines
                - tag:GetResources
                - xray:GetTraceSummaries
                - xray:BatchGetTraces
              Resource: '*'
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource: '*'
              Condition:
                StringEquals:
                  iam:PassedToService: lambda.amazonaws.com
            - Effect: Allow
              Action:
                - logs:DescribeLogStreams
                - logs:GetLogEvents
                - logs:FilterLogEvents
              Resource: arn:aws:logs:*:*:log-group:/aws/lambda/*
            - Effect: Allow
              Action:
                - es:*
              Resource: '*'
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource:
                - arn:aws:s3:::photosbucketb2cc/*
            - Effect: Allow
              Action:
                - rekognition:DetectLabels
              Resource: '*'
            - Effect: Allow
              Action:
                - es:ESHttpPost
                - es:ESHttpPut
              Resource: arn:aws:es:us-west-2:466579977483:domain/photos
      SnapStart:
        ApplyOn: None
      Events:
        BucketEvent1:
          Type: S3
          Properties:
            Bucket:
              Ref: PhotosBucket
            Events:
              - s3:ObjectCreated:*
      RuntimeManagementConfig: {}
  
  PhotosBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: PhotosBucket
      Bucket: !Ref PhotosBucket
      PolicyDocument:
        Statement:
          - Action: s3:*
            Effect: Deny
            Principal: '*'
            Resource:
              - arn:aws:s3:::PhotosBucket/*
              - arn:aws:s3:::PhotosBucket
              # - !Sub "arn:aws:s3:::${PhotosBucket}/*"
              # - !Sub "arn:aws:s3:::${PhotosBucket}"
            Condition:
              Bool:
                aws:SecureTransport: false
